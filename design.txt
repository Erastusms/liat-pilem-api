contoh isi .env
DB_HOST=localhost
DB_USER=root
DB_PASS=password_anda
DB_NAME=movie_db
DB_DIALECT=mysql
JWT_SECRET=supersecretkey
PORT=5000

Rancangan struktur folder api:
ðŸ“‚ project-root
â”‚â”€â”€ ðŸ“‚ src
â”‚   â”‚â”€â”€ ðŸ“‚ config           # Konfigurasi database, env, dll.
â”‚   â”‚   â”‚â”€â”€ db.js          # Koneksi database (PostgreSQL / MySQL)
â”‚   â”‚â”€â”€ ðŸ“‚ models          # Struktur tabel/database
â”‚   â”‚   â”‚â”€â”€ userModel.js   # Model user
â”‚   â”‚   â”‚â”€â”€ movieModel.js  # Model film
â”‚   â”‚â”€â”€ ðŸ“‚ routes          # Definisi endpoint API
â”‚   â”‚   â”‚â”€â”€ userRoutes.js  # Routes untuk user
â”‚   â”‚   â”‚â”€â”€ movieRoutes.js # Routes untuk film
â”‚   â”‚â”€â”€ ðŸ“‚ controllers     # Logika utama dari request
â”‚   â”‚   â”‚â”€â”€ userController.js  # Controller user
â”‚   â”‚   â”‚â”€â”€ movieController.js # Controller film
â”‚   â”‚â”€â”€ ðŸ“‚ services        # Business logic (opsional)
â”‚   â”‚   â”‚â”€â”€ userService.js  # Service untuk user
â”‚   â”‚   â”‚â”€â”€ movieService.js # Service untuk film
â”‚   â”‚â”€â”€ ðŸ“‚ middlewares      # Middleware (auth, error handling, validasi, dll.)
â”‚   â”‚   â”‚â”€â”€ authMiddleware.js # Middleware auth (JWT)
â”‚   â”‚   â”‚â”€â”€ validateMiddleware.js # Middleware validasi Joi
â”‚   â”‚â”€â”€ ðŸ“‚ validations      # Validasi Joi
â”‚   â”‚   â”‚â”€â”€ userValidation.js  # Validasi input user
â”‚   â”‚   â”‚â”€â”€ movieValidation.js # Validasi input film
â”‚   â”‚â”€â”€ server.js          # File utama untuk menjalankan server
â”‚â”€â”€ .env                  # File konfigurasi environment
â”‚â”€â”€ package.json          # Dependensi proyek
â”‚â”€â”€ README.md             # Dokumentasi proyek

Rancangan Database:
+-----------------+      +------------------+      +----------------+
|    users       |      |   movies         |      |  categories    |
+-----------------+      +------------------+      +----------------+
| user_id (PK)   |      | movie_id (PK)    |      | category_id (PK)|
| username       |      | title            |      | name           |
| email          |      | description      |      +----------------+
| password_hash  |      | release_date     |
| role           |      | category_id (FK) |
| created_at     |      | created_at       |
+-----------------+      +------------------+

        +----------------+
        |  favorites     |
        +----------------+
        | favorite_id (PK)|
        | user_id (FK)    |
        | movie_id (FK)   |
        | created_at      |
        +----------------+

        +----------------+
        |   reviews      |
        +----------------+
        | review_id (PK) |
        | user_id (FK)   |
        | movie_id (FK)  |
        | rating (1-5)   |
        | comment        |
        | created_at     |
        +----------------+

        +----------------+
        |  watchlist     |
        +----------------+
        | watchlist_id(PK)|
        | user_id (FK)    |
        | movie_id (FK)   |
        | status (planned, watching, completed) |
        | created_at      |
        +----------------+

TABLE-TABLE NYA:
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    password_hash TEXT NOT NULL,
    role VARCHAR(20) CHECK (role IN ('admin', 'member')) DEFAULT 'member',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE categories (
    category_id SERIAL PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE
);
CREATE TABLE movies (
    movie_id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    release_date DATE,
    category_id INT REFERENCES categories(category_id) ON DELETE SET NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE favorites (
    favorite_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,
    movie_id INT REFERENCES movies(movie_id) ON DELETE CASCADE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, movie_id) -- Setiap user hanya bisa favoritkan 1 film 1 kali
);
CREATE TABLE reviews (
    review_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,
    movie_id INT REFERENCES movies(movie_id) ON DELETE CASCADE,
    rating INT CHECK (rating BETWEEN 1 AND 5),
    comment TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, movie_id) -- 1 user hanya bisa review 1 film 1 kali
);
CREATE TABLE watchlist (
    watchlist_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,
    movie_id INT REFERENCES movies(movie_id) ON DELETE CASCADE,
    status VARCHAR(20) CHECK (status IN ('planned', 'watching', 'completed')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, movie_id) -- 1 user hanya bisa menambahkan 1 film 1 kali
);

Agar performa query lebih cepat, tambahkan index pada kolom yang sering digunakan dalam pencarian:

CREATE INDEX idx_movies_title ON movies(title);
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_favorites_user_movie ON favorites(user_id, movie_id);
CREATE INDEX idx_reviews_user_movie ON reviews(user_id, movie_id);
